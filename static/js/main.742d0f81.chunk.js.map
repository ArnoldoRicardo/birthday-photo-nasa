{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","Date","date","setDate","images","setImages","birthday","setBirthday","loading","setLoading","handleClick","a","year","getFullYear","month","getMonth","day","getDate","currentDate","currentYear","i","fetch","data","json","rawImages","length","newImages","map","img","url","image","className","onChange","value","onClick","width","height","showBullets","showNavs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAoDeA,EA/CF,WAEX,MAAwBC,mBAAS,IAAIC,MAArC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BH,mBAAS,MAArC,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAAgCL,mBAAS,MAAzC,mBAAOM,EAAP,KAAiBC,EAAjB,KACA,EAA8BP,oBAAS,GAAvC,mBAAOQ,EAAP,KAAgBC,EAAhB,KAEMC,EAAW,uCAAG,wCAAAC,EAAA,sDACZC,EAAOV,EAAKW,cACZC,EAAQZ,EAAKa,WAAa,EAAKb,EAAKa,WAAa,EAAzC,WAAkDb,EAAKa,WAAa,GAC5EC,EAAMd,EAAKe,UAAY,EAAKf,EAAKe,UAA3B,WAA6Cf,EAAKe,WACxDC,EAAc,IAAIjB,KAClBkB,EAAcD,EAAYL,cAEhCJ,GAAW,GAPO,IAAAE,EAAA,iBAQTS,GARS,mBAAAT,EAAA,sEASGU,MAAM,+CAAD,OAAgDD,EAAhD,YAAqDN,EAArD,YAA8DE,IATtE,cASVM,EATU,gBAUSA,EAAKC,OAVd,aAUVC,EAVU,QAWFC,OAAO,GAXL,wBAYRC,EAAYF,EAAUG,KAAI,SAAAC,GAAS,MAAO,CAACC,IAAI,8CAAD,OAAgDT,EAAhD,YAAqDN,EAArD,YAA8DE,EAA9D,gBAAyEY,EAAIE,MAA7E,YACpDzB,EAAUqB,GACVnB,EAAYa,GACZX,GAAW,GAfG,sEAQTW,EAAIR,EARK,YAQCQ,GAAKD,GARN,0CAQTC,GARS,wFAQmBA,IARnB,2DAAH,qDAqBjB,OACE,sBAAKW,UAAU,MAAf,UACE,wDACA,cAAC,IAAD,CAAUC,SAAU7B,EAAU8B,MAAO/B,IACrC,wBAAQgC,QAASxB,EAAjB,0DACCF,GAAW,iDACXF,GAAY,0EAA6CA,KACtDF,GAAU,mCAAE,cAAC,IAAD,CACd+B,MAAO,IACPC,OAAQ,IACRhC,OAAQA,EACRiC,aAAa,EACbC,UAAU,UCjCHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.742d0f81.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport SimpleImageSlider from \"react-simple-image-slider\";\n\nconst  App = () => {\n\n  const [date, setDate] = useState(new Date())\n  const [images, setImages] = useState(null)\n  const [birthday, setBirthday] = useState(null)\n  const [loading, setLoading] = useState(false)\n\n  const handleClick = async () => {\n    const year = date.getFullYear()\n    const month = date.getMonth() > 8  ? date.getMonth() + 1  : `0${date.getMonth() + 1}`\n    const day = date.getDate() > 9  ? date.getDate()   : `0${date.getDate() }`\n    const currentDate = new Date()\n    const currentYear = currentDate.getFullYear()\n\n    setLoading(true)\n    for (let i = year; i <= currentYear; i++) {\n      const data = await fetch(`https://epic.gsfc.nasa.gov/api/natural/date/${i}-${month}-${day}`)\n      const rawImages = await  data.json()\n      if (rawImages.length>0){\n        const newImages = rawImages.map(img => { return {url: `https://epic.gsfc.nasa.gov/archive/natural/${i}/${month}/${day}/png/${img.image}.png`}})\n        setImages(newImages)\n        setBirthday(i)\n        setLoading(false)\n        break\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h2>When is your birthday?</h2>\n      <Calendar onChange={setDate}  value={date} />\n      <button onClick={handleClick}>Search the last photo of my birthday by NASA</button>\n      {loading && <h4> buscando datos</h4>}\n      {birthday && <h4> These are images from your birthday at {birthday}</h4>}\n        { images && <><SimpleImageSlider\n        width={896}\n        height={504}\n        images={images}\n        showBullets={true}\n        showNavs={true}\n      /></>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}